Studio Backend Implementation PRD
=================================

## 프로젝트 개요
Studio 스토리보드 협업 시스템의 백엔드 구현 및 프론트엔드 연동 프로젝트입니다.
현재 프론트엔드는 localStorage 기반으로 동작하고 있으며, 이를 실제 백엔드 API와 PostgreSQL 데이터베이스로 전환해야 합니다.

## 목표
1. studio-backend-complete.js의 백엔드 구조를 현재 프로젝트에 통합
2. PostgreSQL 데이터베이스 연결 및 스키마 설정
3. 모든 API 엔드포인트 구현 (JWT 인증 포함)
4. 프론트엔드를 실제 API와 연동
5. Railway에 백엔드 배포

## 주요 기능 요구사항

### 1. 인증 시스템
- 회원가입/로그인 API
- JWT 토큰 기반 인증
- 어드민 계정 지원 (HSG202)

### 2. 스튜디오 관리
- 스튜디오 생성/조회/수정/삭제
- 멤버 초대 및 권한 관리
- 초대코드 시스템

### 3. 프로젝트 관리
- 프로젝트 생성/조회/수정/삭제
- 프로젝트별 씬 관리
- 상태 관리 (진행중, 완료 등)

### 4. 씬 관리
- 씬 생성/조회/수정/삭제
- 초안 및 아트워크 이미지 업로드
- 주석 그리기 기능
- 버전 히스토리 관리

### 5. 댓글 시스템
- 댓글 작성/수정/삭제
- 답글 기능
- 수정요청 태그
- 주석 연동

### 6. 이미지 처리
- 이미지 업로드 (multer + sharp)
- 썸네일 자동 생성
- WebP 변환으로 최적화

### 7. 활동 로그
- 모든 활동 기록 저장
- 사용자별 활동 내역 조회

## 기술 스택
- Backend: Node.js, Express.js
- Database: PostgreSQL
- Authentication: JWT
- File Processing: Multer, Sharp
- Deployment: Railway

## 데이터베이스 스키마
- users: 사용자 정보
- studios: 스튜디오 정보
- studio_members: 스튜디오 멤버십
- projects: 프로젝트 정보
- scenes: 씬 정보
- images: 이미지 파일 정보
- comments: 댓글 정보
- activity_logs: 활동 기록

## API 엔드포인트
- /api/auth/*: 인증 관련
- /api/studios/*: 스튜디오 관리
- /api/projects/*: 프로젝트 관리
- /api/scenes/*: 씬 관리
- /api/images/*: 이미지 업로드/삭제
- /api/comments/*: 댓글 관리
- /api/users/*: 사용자 프로필/활동

## 보안 요구사항
- 모든 API는 JWT 인증 필요
- Rate limiting 적용
- CORS 설정
- Helmet.js로 보안 헤더 설정

## 성능 요구사항
- 이미지 최적화 (WebP 변환)
- 파일 크기 제한 (10MB)
- 데이터베이스 인덱싱
- 압축 미들웨어 사용

## 배포 요구사항
- Railway 배포 설정
- 환경변수 설정
- 데이터베이스 자동 초기화
- Health check 엔드포인트

## 단계별 구현 계획
1. 백엔드 파일 구조 정리
2. 데이터베이스 연결 설정
3. 인증 시스템 구현
4. 각 도메인별 API 구현
5. 프론트엔드 API 연동
6. 테스트 및 디버깅
7. Railway 배포

## 제약사항
- 기존 프론트엔드 기능 유지
- 디자인/레이아웃 변경 금지
- 에러 수정 시 기능 삭제 금지
- 작업 완료 후 패치노트 작성 필수